from math import sqrt,atan,pi
a,b=14500,5567               #4,2
vlx,vrx=-4500,10500      #Since we know the x axis vertices
h,k=int(abs(vrx+vlx)/2),1500
f1,f2=-2000,8000         #Only x component bcz horizontal ellipse and hardcode the y component
fortyfive=pi/4
m,c=0,1
phi=c-k
mu=c+m*h
def coc():
    """Chord of contact ke m and c return karega"""
    return 0
def poc(m,c):
    x1=((b*b*h-a*a*m*phi)+(a*b)*(sqrt(b*b+a*a*m*m-2*m*phi*h-phi*phi-m*m*h*h)))/(b*b+a*a*m*m)
    x2=((b*b*h-a*a*m*phi)-(a*b)*(sqrt(b*b+a*a*m*m-2*m*phi*h-phi*phi-m*m*h*h)))/(b*b+a*a*m*m)
    y1=((b*b*mu+a*a*m*m*k)+(a*b*m)*(sqrt(b*b+a*a*m*m+2*mu*k-k*k-mu*mu)))/(b*b+a*a*m*m)
    y2=((b*b*mu+a*a*m*m*k)-(a*b*m)*(sqrt(b*b+a*a*m*m+2*mu*k-k*k-mu*mu)))/(b*b+a*a*m*m)
    return x1,y1,x2,y2
def slope(x1,y1,x2,y2):
    if x2-x1==0:
        return None
    else:
        return (y2-y1)/(x2-x1)
def angle(x1,y1,p,q,x2,y2):
    m1=slope(p,q,x1,y1)
    m2=slope(x2,y2,p,q)
    #print(m1,m2)
    if 1+m1*m2==0 :     #When lines are perpendicular m1*m2=-1
        return pi/2
    elif m1==m2:        #When both the lines are same or have the same slopes
        return pi
    else:
        return atan((m2-m1)/(1+m1*m2))
def distance(x1,y1,x2,y2):
    return sqrt((x1-x2)**2 + (y1-y2)**2)
def isout2(x,y):
    if distance(x,y,f1,1500) + distance(x,y,f2,1500) >15000:
        return True
    else:
        return False
def rtd(n):
    return (180/pi)*n
p,q=10501,1500
a,b,c,d=poc(m,c)
print(isout2(p,q))
print(rtd(angle(a,b,p,q,c,d)))
