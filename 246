#libraries
#import matplotlib.pyplot as plt
import numpy as np
from math import sqrt,atan,pi

#Not so important stuff

f1,f2=(-2000,1500),(8000,1500)                  #Left and Right focii
c=(int((f1[0]+f2[0])/2),int((f1[1]+f2[1])/2))   #Centre of the ellipse
x=2500                                          #Distane of vertex from any focus
E1,E2=(f1[0]-x,f1[1]),(f2[0]+x,f2[1])           #End vertices of the ellipse

#Important stuff

A=E2[0]-E1[0]                                   #Major axis
e=0.66666666666666666666666666666667            #ecc. calculated by MG=(2a)*e
a,b=A/2,(A/2)*sqrt(1-e*e)                       #Minor axes of the ellipse
f1,f2=(-5000,0),(+5000,0)
#Debug: print(a,b)

#Function definitions
def coc(x1,y1):
    """chord of contact ke m aur c return karega
    1.Let the standard equation of coc is: y=mx+c
    2.In a general equation: rx+ty+u=0 :
        slope(m)=-(r/t) and constant(c)=-(u/t)
    3.Eq. of coc of the ellipse: (x*x1)/a^2 + (y*y1)/b^2 = 1 """
    r,t,u= x1/(a**2) , y1/(b**2) ,-1
    m,c=-(r/t),-(u/t)
    return m,c
#Debug: print(coc(0,b+1))
def poc(m,c):
    h,k=0,0                                         #Centre ke coordinates
    phi=c-k                                         #Constant value
    mu=c+m*h                                        #Constant value
    x1=((b*b*h-a*a*m*phi)+(a*b)*(sqrt(b*b+a*a*m*m-2*m*phi*h-phi*phi-m*m*h*h)))/(b*b+a*a*m*m)
    x2=((b*b*h-a*a*m*phi)-(a*b)*(sqrt(b*b+a*a*m*m-2*m*phi*h-phi*phi-m*m*h*h)))/(b*b+a*a*m*m)
    y1=((b*b*mu+a*a*m*m*k)+(a*b*m)*(sqrt(b*b+a*a*m*m+2*mu*k-k*k-mu*mu)))/(b*b+a*a*m*m)
    y2=((b*b*mu+a*a*m*m*k)-(a*b*m)*(sqrt(b*b+a*a*m*m+2*mu*k-k*k-mu*mu)))/(b*b+a*a*m*m)
    return x1,y1,x2,y2
def distance(x1,y1,x2,y2):
    """Returns the distance between two points using the coordinates of those points"""
    return sqrt((x1-x2)**2 + (y1-y2)**2)
def isout2(x,y):
    """Returns True if the point is outside the ellipse and False otherwise"""
    if distance(x,y,f1[0],f1[1]) + distance(x,y,f2[0],f2[1]) > A:
        return True
    else:
        return False
def rtd(n):
    """Converts from radians to degrees"""
    return (180/pi)*n
def slope(x1,y1,x2,y2):
    """ Returns the slope of the line formed by two points:
            1. None if line is parallel to Y-axis
    """
    if x2-x1==0:
        return None
    else:
        return (y2-y1)/(x2-x1)

#Danger zone below

def angle(x1,y1,p,q,x2,y2):
    """Returns the angle between the lines formed by 3 points:
            P(p,q)
             / \
            /   \
           /Angle\
          /       \
         A(x1,y1) B(x2,y2)
    """
    m1=slope(x1,y1,p,q)
    m2=slope(p,q,x2,y2)
    #print(m1,m2)
    if 1+m1*m2==0 :     #When lines are perpendicular m1*m2=-1
        return pi/2
    elif m1==m2:        #When both the lines are same or have the same slopes
        return 0
    else:
        return pi-abs(atan((m2-m1)/(1+m1*m2)))
def angle2(x1,y1,p,q,x2,y2):
    """Returns the angle between the lines formed by 3 points:
            P(p,q)
             / \
            /   \
           /Angle\
          /       \
         A(x1,y1) B(x2,y2)
    """
    m1=slope(x1,y1,p,q)
    m2=slope(p,q,x2,y2)
    #print(m1,m2)
    if 1+m1*m2==0 :     #When lines are perpendicular m1*m2=-1
        return pi/2
    elif m1==m2:        #When both the lines are same or have the same slopes
        return 0
    else:
        return abs(atan((m2-m1)/(1+m1*m2)))
angles=[]
angles2=[]
L=int(b)+1
R=L+10000
for i in range(L,R):
    m,c=coc(0,i)
    #print(poc(m,c))
    q,w,t,y=poc(m,c)       #(q,w) and (t,y) are the points of contact of the coc
    e,r=0,i                # (e,r) is the 'P' point of our angle function
    angles.append(rtd(angle(q,w,e,r,t,y)))
    if rtd(angle(q,w,e,r,t,y)) > angles[-1] :
        for j in range(i,R):
                m,c=coc(0,j)
                q,w,t,y=poc(m,c)
                e,r=0,j
                angles.append(rtd(angle2(q,w,e,r,t,y)))
        break
print(min(angles))
plt.figure(1)
#plt.subplot(211)
plt.grid()
plt.plot([i for i in range(L,R)],angles)
# plt.subplot(212)
# plt.grid()
# plt.plot([i for i in range(int(b)+1,int(b)+1+R)],angles2)
plt.show()
#plt.plot([i for i in range(int(b)+1,int(b)+1+100)])
#plt.show()

#Debug: print(isout2(0,b+1))
"""
#old code here
vlx,vrx=f1[0],f2[0] 	                        #Since we know the x axis vertices
h,k=int(abs(vrx+vlx)/2),1500
f1,f2=-2000,8000                                #Only x component bcz horizontal ellipse and hardcode the y component
fortyfive=pi/4
m,c=0,1
phi=c-k
mu=c+m*h
def coc():
    #Will return m and c of chord of contact
    return 0
def poc(m,c):
    x1=((b*b*h-a*a*m*phi)+(a*b)*(sqrt(b*b+a*a*m*m-2*m*phi*h-phi*phi-m*m*h*h)))/(b*b+a*a*m*m)
    x2=((b*b*h-a*a*m*phi)-(a*b)*(sqrt(b*b+a*a*m*m-2*m*phi*h-phi*phi-m*m*h*h)))/(b*b+a*a*m*m)
    y1=((b*b*mu+a*a*m*m*k)+(a*b*m)*(sqrt(b*b+a*a*m*m+2*mu*k-k*k-mu*mu)))/(b*b+a*a*m*m)
    y2=((b*b*mu+a*a*m*m*k)-(a*b*m)*(sqrt(b*b+a*a*m*m+2*mu*k-k*k-mu*mu)))/(b*b+a*a*m*m)
    return x1,y1,x2,y2


def distance(x1,y1,x2,y2):
    return sqrt((x1-x2)**2 + (y1-y2)**2)
def isout2(x,y):
    if distance(x,y,f1,1500) + distance(x,y,f2,1500) >15000:
        return True
    else:
        return False
def rtd(n):
    return (180/pi)*n
p,q=10501,1500
a,b,c,d=poc(m,c)
# print(isout2(p,q))
# print(rtd(angle(a,b,p,q,c,d)))
"""
